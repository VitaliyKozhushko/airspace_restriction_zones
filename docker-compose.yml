services:
  db:
    image: postgis/postgis:14-3.2-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB}
      - POSTGRES_USER=${USER_DB}
      - POSTGRES_PASSWORD=${PASSWD_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    env_file:
      - .env.backend.docker
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_DB} -d ${DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django-backend
    command: sh -c "python manage.py collectstatic --no-input &&
                    python manage.py makemigrations &&
                    python manage.py migrate &&
                    python manage.py shell < create_superuser.py &&
                    gunicorn --bind 0.0.0.0:8000 airspace_restriction_zones.wsgi:application"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=docker
    env_file:
      - .env.backend.docker
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-worker
    command: celery -A airspace_restriction_zones worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=docker
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    env_file:
      - .env.backend.docker
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    environment:
      - ENVIRONMENT=docker
    env_file:
      - ./frontend/.env
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
